package org.bhave.experiment;

import org.apache.commons.configuration.Configuration;
import org.bhave.experiment.run.ExperimentConsole;
import org.bhave.sweeper.ParameterSweep;

/**
 * Interface for an experiment runner that loads models and parameter spaces and
 * executes the models according to each possible {@link Configuration}
 * instances present in the parameter space.
 * 
 * @author Davide Nunes
 * 
 */
public interface ExperimentRunner {

	/**
	 * Loads a given model and a parameter space into the experiment runner.
	 * 
	 * @param experiment
	 *            an experiment object to be loaded
	 */
	public void load(Experiment experiment);

	/**
	 * Starts to execute the previously loaded {@link Model} according to the
	 * given parameter space. Does nothing if
	 * {@link #load(Model, ParameterSweep)} as not previously called.
	 * 
	 * If start is called from a paused state, continues with the execution of
	 * the current experiment.
	 */
	public void start();

	/**
	 * Aborts the execution of the current experiment. The data generated by the
	 * data producers attached to the model until the moment you call this
	 * method should be retrievable.
	 */
	public void stop();

	/**
	 * Pauses the execution of the experiment runner, calling {@link #start()}
	 * continues the experiment execution from the point it was paused.
	 */
	public void pause();

	/**
	 * Return the number of runs executed on the model passed with
	 * {@link ExperimentRunner#load(Model, ParameterSweep)}.
	 * 
	 * @return number of complete runs
	 */
	public int getCurrentRuns();

	/**
	 * Returns the total number of runs to be executed by this Experiment
	 * runner. Typically this is given by the {@link ParameterSweep#size()
	 * parameterSpace.size()}.
	 * 
	 * @return
	 */
	public int getTotalRuns();

	public void attach(ExperimentConsole console);

	/**
	 * Set to true on default, it determines weather the experiment runner
	 * prints the parameter space read from the file or not. If this is set to
	 * false, the runner does not create a file with the different unique
	 * configurations.
	 * 
	 * @param print
	 */
	public void setPrintParamSpace(boolean print);

	public boolean isPrintingParamSpace();
}
